#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9998');
app.set('port', port);


/**
 * Create HTTP server.
 */
var server = http.createServer(app);

var jwt = require('jsonwebtoken');
var sockjs = require('sockjs');

// Objet contenant l'ensemble des connections
var connections = {};

var echo = sockjs.createServer({ sockjs_url: 'http://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js' });
echo.on('connection', function(conn) {
  conn.authenticated = false;

  connections[conn.id] = {
    connection: conn
  };

  //console.log(conn);
    conn.on('data', function(message) {
      if(conn.authenticated) {
        console.log("message receive");
        conn.write(JSON.stringify(message));  
      } else {
        jwt.verify(JSON.parse(message).token, 'monsupersecret', function(err, decoded) {
          if(!decoded) {
            //conn.close();
          } else {
            conn.authenticated = true;

            Object.keys(connections).forEach(function(id) {
              if(connections[id].connection.id !== conn.id) {
                connections[id].connection.write(JSON.stringify({
                  type: "id",
                  data: id
                }));  
              }
            });

          }
        });
      }
      
    });
    conn.on('close', function() {});
});
echo.installHandlers(server, {prefix:'/websocket'});



/*
var socks = require('socksv5');

var srv = socks.createServer(function(info, accept, deny) {
  accept();
});
srv.listen(1080, 'localhost', function() {
  console.log('SOCKS server listening on port 1080');
});

srv.useAuth(socks.auth.UserPassword(function(user, password, cb) {
  cb(user === 'nodejs' && password === 'rules!');
}));*/



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
